{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "l3ZEgl7t28Ee"
   },
   "source": [
    "# Homework 1\n",
    "## Introduction\n",
    "### Important dates\n",
    "* Homework release: Thursday, 3rd October 2019\n",
    "* **Homework due**: Wednesday, 16th October 2019 (23:59 hours, 11:59 PM)\n",
    "* Peer review due: Wednesday, 23rd October 2019 (23:59 hours, 11:59 PM)\n",
    "* Grading release: Wednesday, 30th October 2019\n",
    "\n",
    "### Description\n",
    "\n",
    "The data you'll be working with comes from multiple sources. The main data source will be [DBLP](https://dblp.uni-trier.de/), a database of publications from major computer science journals and conferences. A subset of DBLP, which you will use in this assignment, is provided to you via a [google drive folder](https://drive.google.com/file/d/1Kci8joML74tCSzuBbhxtd1ylR4f0dlm6/view). Later on, you will enrich the DBLP data with a dataset on conference rankings and with the proceedings of the [NIPS conference](https://nips.cc/) [1] ('proceedings' is another word for the set of papers published at an academic conference). After loading and cleaning the data, you will answer various questions about its contents.\n",
    "\n",
    "**Some rules:**\n",
    "- You are allowed to use any built-in Python library that comes with Anaconda. If you want to use an external library, you have to justify your choice.\n",
    "- Make sure you use the data folder provided in the repository in *read-only* mode.\n",
    "- Be sure to provide explanations for your answers. A notebook that only has code cells will not suffice.\n",
    "- Also, be sure to *hand in a fully-run and evaluated notebook*. We will not run your notebook for you, we will grade it as is, which means that only the results contained in your evaluated code cells will be considered, and we will not see the results in unevaluated code cells. In order to check whether everything looks as intended, you can check the rendered notebook on the GitHub website once you have pushed your solution there.\n",
    "\n",
    "[1] Note that NIPS was renamed to NeurIPS in 2018, but for simplicity, whenever we say 'NIPS', we really mean 'NIPS and NeurIPS'."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "A0IIdWOs48BB"
   },
   "source": [
    "## Task A. Getting a sense of the dataset\n",
    "\n",
    "### A1. Loading the data\n",
    "Download the DBLP dataset (available on [google drive](https://drive.google.com/file/d/1Kci8joML74tCSzuBbhxtd1ylR4f0dlm6/view)) and load it into a Pandas dataframe. A row of your dataframe should look as follows:\n",
    "\n",
    "| paper id | author names | publication year | paper title | \n",
    "| :----:|:-------------:| :-----:|:-----:|\n",
    "| conf/nips/doe1036 | [John Doe, Jane Doe] | 2003 | Some Catchy Title: An Expanded and Boring Title | \n",
    "\n",
    "\n",
    "1. Filter the papers: **keep only conference papers**. For each of the remaining ones, find the acronym of the conference where it was published. Retain only those papers that have been published in the conferences listed in `data/list_of_ai_conferences.txt`. Additionally, add a column named **'conference'** to your dataframe.   \n",
    "_Hint: The `paper id` tells you whether a paper was published at a conference, and if so, at which one._\n",
    "\n",
    "2. Report the overall number of papers in the filtered dataset, as well as the number of papers per conference."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ara6mLe1l_CQ"
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re\n",
    "from matplotlib.ticker import MaxNLocator\n",
    "import matplotlib.pyplot as plt\n",
    "from requests import get\n",
    "from bs4 import BeautifulSoup\n",
    "\n",
    "# Please install this library first\n",
    "import ast"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Load in the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 462,
   "metadata": {},
   "outputs": [],
   "source": [
    "#load in the dataset\n",
    "df = pd.read_csv('Data/dblp.tsv.bz2', compression = 'bz2', sep = '\\t')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 463,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>authors</th>\n",
       "      <th>year</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>tr/meltdown/s18</td>\n",
       "      <td>['Paul Kocher', 'Daniel Genkin', 'Daniel Gruss...</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>Spectre Attacks: Exploiting Speculative Execut...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>tr/meltdown/m18</td>\n",
       "      <td>['Moritz Lipp', 'Michael Schwarz 0001', 'Danie...</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>Meltdown</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>tr/acm/CS2013</td>\n",
       "      <td>[]</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>Computer Science Curricula 2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>tr/gte/TR-0263-08-94-165</td>\n",
       "      <td>['Frank Manola']</td>\n",
       "      <td>1994.0</td>\n",
       "      <td>An Evaluation of Object-Oriented DBMS Developm...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>tr/gte/TR-0222-10-92-165</td>\n",
       "      <td>['Michael L. Brodie', 'Michael Stonebraker']</td>\n",
       "      <td>1993.0</td>\n",
       "      <td>DARWIN: On the Incremental Migration of Legacy...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                id                                            authors    year  \\\n",
       "0  tr/meltdown/s18  ['Paul Kocher', 'Daniel Genkin', 'Daniel Gruss...  2018.0   \n",
       "1  tr/meltdown/m18  ['Moritz Lipp', 'Michael Schwarz 0001', 'Danie...  2018.0   \n",
       "2    tr/acm/CS2013                                                 []  2013.0   \n",
       "\n",
       "                                               title  \n",
       "0  Spectre Attacks: Exploiting Speculative Execut...  \n",
       "1                                           Meltdown  \n",
       "2                    Computer Science Curricula 2013  \n",
       "3  An Evaluation of Object-Oriented DBMS Developm...  \n",
       "4  DARWIN: On the Incremental Migration of Legacy...  "
      ]
     },
     "execution_count": 463,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Rename the columns to be conform with the example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 464,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.columns = ['paper id', 'author names', 'publication year', 'paper title']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 465,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>paper id</th>\n",
       "      <th>author names</th>\n",
       "      <th>publication year</th>\n",
       "      <th>paper title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>tr/meltdown/s18</td>\n",
       "      <td>['Paul Kocher', 'Daniel Genkin', 'Daniel Gruss...</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>Spectre Attacks: Exploiting Speculative Execut...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>tr/meltdown/m18</td>\n",
       "      <td>['Moritz Lipp', 'Michael Schwarz 0001', 'Danie...</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>Meltdown</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>tr/acm/CS2013</td>\n",
       "      <td>[]</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>Computer Science Curricula 2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>tr/gte/TR-0263-08-94-165</td>\n",
       "      <td>['Frank Manola']</td>\n",
       "      <td>1994.0</td>\n",
       "      <td>An Evaluation of Object-Oriented DBMS Developm...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>tr/gte/TR-0222-10-92-165</td>\n",
       "      <td>['Michael L. Brodie', 'Michael Stonebraker']</td>\n",
       "      <td>1993.0</td>\n",
       "      <td>DARWIN: On the Incremental Migration of Legacy...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   paper id  \\\n",
       "0           tr/meltdown/s18   \n",
       "1           tr/meltdown/m18   \n",
       "2             tr/acm/CS2013   \n",
       "3  tr/gte/TR-0263-08-94-165   \n",
       "4  tr/gte/TR-0222-10-92-165   \n",
       "\n",
       "                                        author names publication year  \\\n",
       "0  ['Paul Kocher', 'Daniel Genkin', 'Daniel Gruss...           2018.0   \n",
       "1  ['Moritz Lipp', 'Michael Schwarz 0001', 'Danie...           2018.0   \n",
       "2                                                 []           2013.0   \n",
       "3                                   ['Frank Manola']           1994.0   \n",
       "4       ['Michael L. Brodie', 'Michael Stonebraker']           1993.0   \n",
       "\n",
       "                                         paper title  \n",
       "0  Spectre Attacks: Exploiting Speculative Execut...  \n",
       "1                                           Meltdown  \n",
       "2                    Computer Science Curricula 2013  \n",
       "3  An Evaluation of Object-Oriented DBMS Developm...  \n",
       "4  DARWIN: On the Incremental Migration of Legacy...  "
      ]
     },
     "execution_count": 465,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Clean the \"publication year\" using regular expression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 466,
   "metadata": {},
   "outputs": [],
   "source": [
    "# \"\"\"regex years: by making a category list of publication year it is easy to observe there are several expressions like \n",
    "# \"'00\"(00-18, 36-99), '1936.0', '1998', '<em>1936.0</em>', '<i>1937.0</i>', '<em>?</em>', '?', so we first extract the \n",
    "# two or four digits out. Then since the year in four digits starts from 1936 to 2018, \"19\",\"20\" are added resonably \n",
    "# before 36-99, 00-18 respectively.\"\"\"\n",
    "def regExpYear(line):\n",
    "    \"\"\"Extract the exact publication year as numerical value from the corresponding column, \n",
    "       note that 'unknown' is not handled here.\n",
    "    \"\"\"\n",
    "    match = None\n",
    "    if (line is not None):\n",
    "        match = re.search('\\d{2,4}',line)\n",
    "    if match:\n",
    "        year = match.group(0)\n",
    "        \n",
    "        # In some cases the year is only shown in the form '89 or '10, we need to decide the centry it belongs to.\n",
    "        if(len(year) == 2):\n",
    "            if( year[0] > '1'):\n",
    "                year = '19' + year\n",
    "            else:\n",
    "                year = '20' + year\n",
    "        return year\n",
    "    else:\n",
    "        return 'unknown'\n",
    "    \n",
    "df['publication year'] = df['publication year'].apply(regExpYear)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 467,
   "metadata": {
    "colab_type": "text",
    "id": "mnE6N9zXl-yz",
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>paper id</th>\n",
       "      <th>author names</th>\n",
       "      <th>publication year</th>\n",
       "      <th>paper title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>tr/meltdown/s18</td>\n",
       "      <td>['Paul Kocher', 'Daniel Genkin', 'Daniel Gruss...</td>\n",
       "      <td>2018</td>\n",
       "      <td>Spectre Attacks: Exploiting Speculative Execut...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>tr/meltdown/m18</td>\n",
       "      <td>['Moritz Lipp', 'Michael Schwarz 0001', 'Danie...</td>\n",
       "      <td>2018</td>\n",
       "      <td>Meltdown</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>tr/acm/CS2013</td>\n",
       "      <td>[]</td>\n",
       "      <td>2013</td>\n",
       "      <td>Computer Science Curricula 2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>tr/gte/TR-0263-08-94-165</td>\n",
       "      <td>['Frank Manola']</td>\n",
       "      <td>1994</td>\n",
       "      <td>An Evaluation of Object-Oriented DBMS Developm...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>tr/gte/TR-0222-10-92-165</td>\n",
       "      <td>['Michael L. Brodie', 'Michael Stonebraker']</td>\n",
       "      <td>1993</td>\n",
       "      <td>DARWIN: On the Incremental Migration of Legacy...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   paper id  \\\n",
       "0           tr/meltdown/s18   \n",
       "1           tr/meltdown/m18   \n",
       "2             tr/acm/CS2013   \n",
       "3  tr/gte/TR-0263-08-94-165   \n",
       "4  tr/gte/TR-0222-10-92-165   \n",
       "\n",
       "                                        author names publication year  \\\n",
       "0  ['Paul Kocher', 'Daniel Genkin', 'Daniel Gruss...             2018   \n",
       "1  ['Moritz Lipp', 'Michael Schwarz 0001', 'Danie...             2018   \n",
       "2                                                 []             2013   \n",
       "3                                   ['Frank Manola']             1994   \n",
       "4       ['Michael L. Brodie', 'Michael Stonebraker']             1993   \n",
       "\n",
       "                                         paper title  \n",
       "0  Spectre Attacks: Exploiting Speculative Execut...  \n",
       "1                                           Meltdown  \n",
       "2                    Computer Science Curricula 2013  \n",
       "3  An Evaluation of Object-Oriented DBMS Developm...  \n",
       "4  DARWIN: On the Incremental Migration of Legacy...  "
      ]
     },
     "execution_count": 467,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Transform author names from string to list of strings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 468,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Note that the strings are written in a form similar to list in python (with comma and square brackets), \n",
    "# therefore one can simply applies the literal evalution to transform them to list\n",
    "df['author names'] = df['author names'].apply(ast.literal_eval)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Extract conference papers from the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 469,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extract conference papers based on the 'conf' label in paper id\n",
    "conf_paper_df = df[df['paper id'].str.contains('conf/')].reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 470,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>paper id</th>\n",
       "      <th>author names</th>\n",
       "      <th>publication year</th>\n",
       "      <th>paper title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>conf/pfe/KnauberT01</td>\n",
       "      <td>[Peter Knauber, Steffen Thiel]</td>\n",
       "      <td>2001</td>\n",
       "      <td>Session Report on Product Issues in Product Fa...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>conf/pfe/BachmannGLNPRV03</td>\n",
       "      <td>[Felix Bachmann, Michael Goedicke, Julio Cesar...</td>\n",
       "      <td>2003</td>\n",
       "      <td>A Meta-model for Representing Variability in P...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>conf/pfe/GomaaH03</td>\n",
       "      <td>[Hassan Gomaa, Mohamed Hussein 0002]</td>\n",
       "      <td>2003</td>\n",
       "      <td>Dynamic Software Reconfiguration in Software P...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>conf/pfe/KnauberBBLLNSW01</td>\n",
       "      <td>[Peter Knauber, Jesús Bermejo Muñoz, Günter Bö...</td>\n",
       "      <td>2001</td>\n",
       "      <td>Quantifying Product Line Benefits.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>conf/pfe/HallsteinsenFS03</td>\n",
       "      <td>[Svein O. Hallsteinsen, Tor Erlend Fægri, Magn...</td>\n",
       "      <td>2003</td>\n",
       "      <td>Patterns in Product Family Architecture Design.</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    paper id  \\\n",
       "0        conf/pfe/KnauberT01   \n",
       "1  conf/pfe/BachmannGLNPRV03   \n",
       "2          conf/pfe/GomaaH03   \n",
       "3  conf/pfe/KnauberBBLLNSW01   \n",
       "4  conf/pfe/HallsteinsenFS03   \n",
       "\n",
       "                                        author names publication year  \\\n",
       "0                     [Peter Knauber, Steffen Thiel]             2001   \n",
       "1  [Felix Bachmann, Michael Goedicke, Julio Cesar...             2003   \n",
       "2               [Hassan Gomaa, Mohamed Hussein 0002]             2003   \n",
       "3  [Peter Knauber, Jesús Bermejo Muñoz, Günter Bö...             2001   \n",
       "4  [Svein O. Hallsteinsen, Tor Erlend Fægri, Magn...             2003   \n",
       "\n",
       "                                         paper title  \n",
       "0  Session Report on Product Issues in Product Fa...  \n",
       "1  A Meta-model for Representing Variability in P...  \n",
       "2  Dynamic Software Reconfiguration in Software P...  \n",
       "3                 Quantifying Product Line Benefits.  \n",
       "4    Patterns in Product Family Architecture Design.  "
      ]
     },
     "execution_count": 470,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conf_paper_df.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Extract ai conference papers from conference papers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 474,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the ai conference list\n",
    "ai_conf = pd.read_csv(\"data/list_of_ai_conferences.txt\", header=None, sep=' ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 473,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Extract conference of each paper and create a new conference column\n",
    "conf_paper_df[\"conference\"] = conf_paper_df[\"paper id\"].str.split(\"/\", expand = True)[1] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 475,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>paper id</th>\n",
       "      <th>author names</th>\n",
       "      <th>publication year</th>\n",
       "      <th>paper title</th>\n",
       "      <th>conference</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>conf/pfe/KnauberT01</td>\n",
       "      <td>[Peter Knauber, Steffen Thiel]</td>\n",
       "      <td>2001</td>\n",
       "      <td>Session Report on Product Issues in Product Fa...</td>\n",
       "      <td>pfe</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>conf/pfe/BachmannGLNPRV03</td>\n",
       "      <td>[Felix Bachmann, Michael Goedicke, Julio Cesar...</td>\n",
       "      <td>2003</td>\n",
       "      <td>A Meta-model for Representing Variability in P...</td>\n",
       "      <td>pfe</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>conf/pfe/GomaaH03</td>\n",
       "      <td>[Hassan Gomaa, Mohamed Hussein 0002]</td>\n",
       "      <td>2003</td>\n",
       "      <td>Dynamic Software Reconfiguration in Software P...</td>\n",
       "      <td>pfe</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>conf/pfe/KnauberBBLLNSW01</td>\n",
       "      <td>[Peter Knauber, Jesús Bermejo Muñoz, Günter Bö...</td>\n",
       "      <td>2001</td>\n",
       "      <td>Quantifying Product Line Benefits.</td>\n",
       "      <td>pfe</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>conf/pfe/HallsteinsenFS03</td>\n",
       "      <td>[Svein O. Hallsteinsen, Tor Erlend Fægri, Magn...</td>\n",
       "      <td>2003</td>\n",
       "      <td>Patterns in Product Family Architecture Design.</td>\n",
       "      <td>pfe</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    paper id  \\\n",
       "0        conf/pfe/KnauberT01   \n",
       "1  conf/pfe/BachmannGLNPRV03   \n",
       "2          conf/pfe/GomaaH03   \n",
       "3  conf/pfe/KnauberBBLLNSW01   \n",
       "4  conf/pfe/HallsteinsenFS03   \n",
       "\n",
       "                                        author names publication year  \\\n",
       "0                     [Peter Knauber, Steffen Thiel]             2001   \n",
       "1  [Felix Bachmann, Michael Goedicke, Julio Cesar...             2003   \n",
       "2               [Hassan Gomaa, Mohamed Hussein 0002]             2003   \n",
       "3  [Peter Knauber, Jesús Bermejo Muñoz, Günter Bö...             2001   \n",
       "4  [Svein O. Hallsteinsen, Tor Erlend Fægri, Magn...             2003   \n",
       "\n",
       "                                         paper title conference  \n",
       "0  Session Report on Product Issues in Product Fa...        pfe  \n",
       "1  A Meta-model for Representing Variability in P...        pfe  \n",
       "2  Dynamic Software Reconfiguration in Software P...        pfe  \n",
       "3                 Quantifying Product Line Benefits.        pfe  \n",
       "4    Patterns in Product Family Architecture Design.        pfe  "
      ]
     },
     "execution_count": 475,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conf_paper_df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 476,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Sort out ai conference papers\n",
    "ai_conf_paper_df = conf_paper_df[conf_paper_df['conference'].isin(ai_conf.iloc[:,0])].reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 483,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save ai conference papers\n",
    "ai_conf_paper_df.to_pickle('./data/A1complete.pkl')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"#0000dd\">Total number of papers in the filtered dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 479,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "102003"
      ]
     },
     "execution_count": 479,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ai_conf_paper_df['paper id'].size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 480,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Group the papers by conference\n",
    "ai_conf_paper_df_grouped = ai_conf_paper_df.groupby(ai_conf_paper_df.conference)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"#0000dd\">The number of papers per conference:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 481,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "conference\n",
       "aaai      10796\n",
       "aamas       367\n",
       "accv       2390\n",
       "acl        6330\n",
       "cvpr      12853\n",
       "emnlp      3299\n",
       "fgr        1383\n",
       "icann      3134\n",
       "iccbr       863\n",
       "iccv       4179\n",
       "icml       5017\n",
       "iconip     4985\n",
       "icra      21585\n",
       "ida         712\n",
       "ijcai      9669\n",
       "ilp         679\n",
       "ksem        635\n",
       "naacl      3310\n",
       "nips       8445\n",
       "pricai     1372\n",
       "dtype: int64"
      ]
     },
     "execution_count": 481,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ai_conf_paper_df_grouped.size()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "mnE6N9zXl-yz"
   },
   "source": [
    "### A2. An author-centric look\n",
    "The dataframe you created above was a paper-centric one. Now, we want you to create a new dataframe centered around authors. Do this by expanding the author names in the lists in the 2nd column into separate rows. That is, if a paper has 3 authors, turn that row into 3 rows, each of which only contains one of the author names (along with the rest of the paper information, i.e., title, conference and year). Keep both dataframes, we are going to need both of them.    \n",
    "**Report the number of unique authors.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 363,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>paper id</th>\n",
       "      <th>author name</th>\n",
       "      <th>publication year</th>\n",
       "      <th>paper title</th>\n",
       "      <th>conference</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>conf/iccv/KunoOO90</td>\n",
       "      <td>Yoshinori Kuno</td>\n",
       "      <td>1990</td>\n",
       "      <td>Object recognition using a feature search stra...</td>\n",
       "      <td>iccv</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>conf/iccv/KunoOO90</td>\n",
       "      <td>Yasukazu Okamoto</td>\n",
       "      <td>1990</td>\n",
       "      <td>Object recognition using a feature search stra...</td>\n",
       "      <td>iccv</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>conf/iccv/KunoOO90</td>\n",
       "      <td>Satoshi Okada</td>\n",
       "      <td>1990</td>\n",
       "      <td>Object recognition using a feature search stra...</td>\n",
       "      <td>iccv</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>conf/iccv/VedulaBRCK99</td>\n",
       "      <td>Sundar Vedula</td>\n",
       "      <td>1999</td>\n",
       "      <td>Three-Dimensional Scene Flow.</td>\n",
       "      <td>iccv</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>conf/iccv/VedulaBRCK99</td>\n",
       "      <td>Simon Baker</td>\n",
       "      <td>1999</td>\n",
       "      <td>Three-Dimensional Scene Flow.</td>\n",
       "      <td>iccv</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 paper id       author name publication year  \\\n",
       "0      conf/iccv/KunoOO90    Yoshinori Kuno             1990   \n",
       "0      conf/iccv/KunoOO90  Yasukazu Okamoto             1990   \n",
       "0      conf/iccv/KunoOO90     Satoshi Okada             1990   \n",
       "1  conf/iccv/VedulaBRCK99     Sundar Vedula             1999   \n",
       "1  conf/iccv/VedulaBRCK99       Simon Baker             1999   \n",
       "\n",
       "                                         paper title conference  \n",
       "0  Object recognition using a feature search stra...       iccv  \n",
       "0  Object recognition using a feature search stra...       iccv  \n",
       "0  Object recognition using a feature search stra...       iccv  \n",
       "1                      Three-Dimensional Scene Flow.       iccv  \n",
       "1                      Three-Dimensional Scene Flow.       iccv  "
      ]
     },
     "execution_count": 363,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Expand the author names in lists into seperate rows\n",
    "author_conf_paper_df = ai_conf_paper_df.explode('author names')\n",
    "author_conf_paper_df.rename(columns={\"author names\": \"author name\"}, inplace=True)\n",
    "author_conf_paper_df.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"#0000dd\">The number of unique authors:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 364,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "105817"
      ]
     },
     "execution_count": 364,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "author_conf_paper_df['author name'].nunique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "8ZiuGiDsl60f"
   },
   "source": [
    "### A3. Is your data analysis-friendly?\n",
    "\n",
    "Using an appropriate view of your data (paper-centric or author-centric), solve the following tasks:\n",
    "\n",
    "1. Plot the number of papers per author and analyze it. Do you observe any outliers? Can you identify the source of the problem? Please elaborate!   \n",
    "_Hint: To find out where the problem comes from, try performing an analysis at the conference or year level._   \n",
    "Make sure you remove this inconsistency from your dataframe before moving to the next step, and also create a new plot of the number of papers per author after fixing the problem.   \n",
    "\n",
    "2. Plot the number of papers per year. Do you observe any inconsistency in the output? Real-world data is usually messy, with typos, erroneous entries, and sometimes issues that make even loading the data problematic. Fix any errors that you encounter along the way, find ways to clean the attribute `year`, and redo the plot of the number of papers per year.   \n",
    "\n",
    "3. Machine learning (ML) has been one of the hottest topics within the broader area of AI recently, so let’s see if this is reflected in the number of ML publications. In particular, let’s focus on the two major ML conferences, NIPS and ICML: make a new dataframe with only NIPS and ICML papers (let’s call these the “ML papers”), plot the number of ML papers over time, and analyze and discuss the plot. Do you observe anything odd in this plot? What causes these problems?   \n",
    "_Hint: Try to perform an analysis at the conference or year level._   \n",
    "\n",
    "4. By now, you may have noticed that some conferences are not fully represented in the DBLP dataset. Complete the paper-centric dataframe by scraping the full NIPS data from the online proceedings at https://papers.nips.cc/ (maintain the same schema used in your previous dataframes, but fill in missing values). After this step, remove any remaining papers that have missing values. Redo the plots of steps A3.2 and A3.3 after fixing the issue.   \n",
    "\n",
    "_Note: In order to avoid re-running the cleaning part of the notebook every time, you could save the results at this point as a pickle file! Also, propagating your cleaning to both dataframes might prove useful later on._"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***A3.1***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### We first plot the number of papers published by each author."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 366,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/miniconda3/envs/ada/lib/python3.7/site-packages/ipykernel_launcher.py:4: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.\n",
      "  after removing the cwd from sys.path.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the number of papers published by each author\n",
    "author_conf_paper_df_grouped = author_conf_paper_df.groupby('author name')\n",
    "author_conf_paper_df_grouped.size().plot(title='number of papers per author')\n",
    "ax = plt.axes()\n",
    "x_axis = ax.axes.get_xaxis()\n",
    "plt.setp(ax.get_xticklabels(), visible=False)\n",
    "ax.set_xlabel('authors')\n",
    "ax.set_ylabel(\"number of papers\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"#0000dd\">Two outliers are obeserved with extraordinarily high productivity."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"#0000dd\">Then we plot the nubmer of papers per year per author to see if the two outliers are just two talented authors or a mistake in the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 367,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/miniconda3/envs/ada/lib/python3.7/site-packages/ipykernel_launcher.py:4: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.\n",
      "  after removing the cwd from sys.path.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot the nubmer of papers per year per author\n",
    "author_conf_paper_df.groupby(['author name', 'publication year']).size().plot(title='number of papers per (author, publication year) pairs')\n",
    "ax = plt.axes()\n",
    "x_axis = ax.axes.get_xaxis()\n",
    "plt.setp(ax.get_xticklabels(), visible=False)\n",
    "ax.set_xlabel('(author, publication year)')\n",
    "ax.set_ylabel('number of papers')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 368,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "author name              publication year\n",
       "Satinder P. Singh (ed.)  2017                663\n",
       "Sheila A. McIlraith      2018                893\n",
       "dtype: int64"
      ]
     },
     "execution_count": 368,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "author_conf_paper_df.groupby(['author name', 'publication year']).size()[author_conf_paper_df.groupby(['author name', 'publication year']).size() > 500]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<font color=\"#0000dd\">It can be seen that their publications concentrate respectively on two particular years and the amounts are abnormally huge. We look into details of the first outlier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 369,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                  paper id  author name  paper title  conference\n",
      "publication year                                                \n",
      "2017                   663          663          663         663\n",
      "            paper id  author name  publication year  paper title\n",
      "conference                                                      \n",
      "aaai             663          663               663          663\n"
     ]
    }
   ],
   "source": [
    "print(author_conf_paper_df[author_conf_paper_df['author name'] == 'Satinder P. Singh (ed.)'\n",
    "                    ].groupby('publication year').count())\n",
    "\n",
    "print(author_conf_paper_df[(author_conf_paper_df['author name'] == 'Satinder P. Singh (ed.)')].groupby('conference').count())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<font color=\"#0000dd\">We can see that the publications of the first outlier (Satinder P. Singh (ed.)) are solely on aaai in 2017. This is clearly impossible."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 370,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                  paper id  author name  paper title  conference\n",
      "publication year                                                \n",
      "1997                     1            1            1           1\n",
      "2000                     1            1            1           1\n",
      "2001                     1            1            1           1\n",
      "2003                     1            1            1           1\n",
      "2006                     1            1            1           1\n",
      "2007                     2            2            2           2\n",
      "2008                     1            1            1           1\n",
      "2009                     1            1            1           1\n",
      "2010                     1            1            1           1\n",
      "2011                     2            2            2           2\n",
      "2013                     2            2            2           2\n",
      "2014                     2            2            2           2\n",
      "2015                     1            1            1           1\n",
      "2016                     4            4            4           4\n",
      "2017                     4            4            4           4\n",
      "2018                   893          893          893         893\n",
      "            paper id  author name  publication year  paper title\n",
      "conference                                                      \n",
      "aaai             890          890               890          890\n",
      "icml               1            1                 1            1\n",
      "ijcai              2            2                 2            2\n"
     ]
    }
   ],
   "source": [
    "print(author_conf_paper_df[author_conf_paper_df['author name'] == 'Sheila A. McIlraith'\n",
    "                    ].groupby('publication year').count())\n",
    "print(author_conf_paper_df[(author_conf_paper_df['author name'] == 'Sheila A. McIlraith')&\n",
    "                    (author_conf_paper_df['publication year'] == '2018')].groupby('conference').count())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"#0000dd\">Similarly, the second outlier author has 890 on aaai in 2018, which is also impossible."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"#0000dd\">In conclusion, the authors named \"Sheila A. McIlraith\" and \"Satinder P. Singh (ed.)\" are two outliers who have wrong publication numbers on aaai in two different years. We further search some supplementary information online to verify our supposition:\n",
    "    \n",
    "<font color=\"#0000dd\">The number of \"Sheila A. McIlraith\"'s publications (900) is abnormaly high in year 2018. According to dblp website, she only has one publication on this year's aaai conference \"Proceedings of the Thirty-Second AAAI Conference on Artificial Intelligence, (AAAI-18), the 30th innovative Applications of Artificial Intelligence (IAAI-18), and the 8th AAAI Symposium on Educational Advances in Artificial Intelligence (EAAI-18), New Orleans, Louisiana, USA, February 2-7, 2018.\" yet in the dataset, there are 890. There should be some error in the dataset.\n",
    "\n",
    "<font color=\"#0000dd\">The circumstance is the same for \"Satinder P. Singh (ed.)\". He published two journals \"Proceedings of the Thirty-First AAAI Conference on Artificial Intelligence, February 4-9, 2017, San Francisco, California, USA.\" and \"A Stackelberg Game Model for Botnet Traffic Exfiltration.\" on aaai in 2017.\n",
    "\n",
    "<font color=\"#0000dd\">We then search these papers actually published by them in the dataset and exclude them from data cleaning. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 371,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>paper id</th>\n",
       "      <th>author names</th>\n",
       "      <th>publication year</th>\n",
       "      <th>paper title</th>\n",
       "      <th>conference</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>38936</td>\n",
       "      <td>conf/aaai/2018</td>\n",
       "      <td>[Sheila A. McIlraith]</td>\n",
       "      <td>2018</td>\n",
       "      <td>Proceedings of the Thirty-Second AAAI Conferen...</td>\n",
       "      <td>aaai</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             paper id           author names publication year  \\\n",
       "38936  conf/aaai/2018  [Sheila A. McIlraith]             2018   \n",
       "\n",
       "                                             paper title conference  \n",
       "38936  Proceedings of the Thirty-Second AAAI Conferen...       aaai  "
      ]
     },
     "execution_count": 371,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ai_conf_paper_df[ai_conf_paper_df['paper title'].str.contains('Proceedings of the Thirty-Second AAAI Conference on Artificial Intelligence')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 372,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>paper id</th>\n",
       "      <th>author names</th>\n",
       "      <th>publication year</th>\n",
       "      <th>paper title</th>\n",
       "      <th>conference</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>36976</td>\n",
       "      <td>conf/aaai/2017</td>\n",
       "      <td>[Satinder P. Singh (ed.)]</td>\n",
       "      <td>2017</td>\n",
       "      <td>Proceedings of the Thirty-First AAAI Conferenc...</td>\n",
       "      <td>aaai</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             paper id               author names publication year  \\\n",
       "36976  conf/aaai/2017  [Satinder P. Singh (ed.)]             2017   \n",
       "\n",
       "                                             paper title conference  \n",
       "36976  Proceedings of the Thirty-First AAAI Conferenc...       aaai  "
      ]
     },
     "execution_count": 372,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ai_conf_paper_df[ai_conf_paper_df['paper title'].str.contains('Proceedings of the Thirty-First AAAI Conference on Artificial Intelligence, February 4-9, 2017, San Francisco, California, USA.')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 373,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>paper id</th>\n",
       "      <th>author names</th>\n",
       "      <th>publication year</th>\n",
       "      <th>paper title</th>\n",
       "      <th>conference</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>34705</td>\n",
       "      <td>conf/aaai/NguyenWS17</td>\n",
       "      <td>[Thanh Hong Nguyen, Michael P. Wellman, Satind...</td>\n",
       "      <td>2017</td>\n",
       "      <td>A Stackelberg Game Model for Botnet Traffic Ex...</td>\n",
       "      <td>aaai</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   paper id  \\\n",
       "34705  conf/aaai/NguyenWS17   \n",
       "\n",
       "                                            author names publication year  \\\n",
       "34705  [Thanh Hong Nguyen, Michael P. Wellman, Satind...             2017   \n",
       "\n",
       "                                             paper title conference  \n",
       "34705  A Stackelberg Game Model for Botnet Traffic Ex...       aaai  "
      ]
     },
     "execution_count": 373,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ai_conf_paper_df[ai_conf_paper_df['paper title'].str.contains('A Stackelberg Game Model for Botnet Traffic Exfiltration')]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Remove the inconsistency and visualize the cleaned dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 374,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Select the papers published by Sheila A. McIlraith on aaai in 2018.\n",
    "index_removed = (ai_conf_paper_df['conference'] == 'aaai') & (ai_conf_paper_df['publication year'] == '2018')\\\n",
    "& (pd.Series(['Sheila A. McIlraith' in ls for ls in ai_conf_paper_df['author names']]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 378,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Exclude the correct journal.\n",
    "index_removed.iloc[38936] = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 379,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Remove Sheila A. McIlraith from the list of authors of the papers that she did not publish.\n",
    "ai_conf_paper_df['author names'][index_removed] = ai_conf_paper_df['author names'][index_removed].apply(lambda x:x[:-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 380,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Select the papers published by Satinder P. Singh (ed.) on aaai in 2017.\n",
    "index_removed2 = (ai_conf_paper_df['conference'] == 'aaai') & (ai_conf_paper_df['publication year'] == '2017')\\\n",
    "& (pd.Series(['Satinder P. Singh (ed.)' in ls for ls in ai_conf_paper_df['author names']]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 381,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Exclude the correct journal.\n",
    "index_removed2.iloc[36976] = False\n",
    "index_removed2.iloc[34705] = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 382,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Remove Satinder P. Singh (ed.) from the list of authors of the papers that he did not publish.\n",
    "ai_conf_paper_df['author names'][index_removed2] = ai_conf_paper_df['author names'][index_removed2].apply(lambda x:x[:-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 383,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Recompute the author centric data frame\n",
    "author_conf_paper_df = ai_conf_paper_df.explode('author names')\n",
    "author_conf_paper_df.rename(columns={\"author names\": \"author name\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 384,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/miniconda3/envs/ada/lib/python3.7/site-packages/ipykernel_launcher.py:4: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.\n",
      "  after removing the cwd from sys.path.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot the number of papers per author again. Now the plot looks more reasonable.\n",
    "author_conf_paper_df_grouped = author_conf_paper_df.groupby('author name')\n",
    "author_conf_paper_df_grouped.size().plot(title='number of papers per author')\n",
    "ax = plt.axes()\n",
    "x_axis = ax.axes.get_xaxis()\n",
    "plt.setp(ax.get_xticklabels(), visible=False)\n",
    "ax.set_xlabel(\"authors\")\n",
    "ax.set_ylabel(\"number of papers\")\n",
    "ax.set_ylim(0, 300)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***A3.2***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"#0000dd\">The publication year is already cleaned in A1, since an example of a row in the data frame is already given in the description of A1. Those with '.0', \"'\", '<\\i>' and '<\\em>' are already processed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 385,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot the number of papers each author publish every year.\n",
    "ai_conf_paper_df.groupby('publication year').size().plot.bar()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<font color=\"#0000dd\">It can be observed that a category called 'Unknown' still exists and we remove it for coherence of our dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 387,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Remove data with unknown publication year\n",
    "ai_conf_paper_df = ai_conf_paper_df[ai_conf_paper_df['publication year'] != 'unknown']\n",
    "ai_conf_paper_df['publication year'] = ai_conf_paper_df['publication year'].astype('int16')\n",
    "author_conf_paper_df = ai_conf_paper_df.explode('author names')\n",
    "author_conf_paper_df.rename(columns={\"author names\": \"author name\"}, inplace=True)\n",
    "ai_conf_paper_df = ai_conf_paper_df.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 388,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7091d9e10>"
      ]
     },
     "execution_count": 388,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot the number of papers each author publish every year again without papers with unknown publication year.\n",
    "ai_conf_paper_df_grouped_year = ai_conf_paper_df.groupby('publication year')\n",
    "ai_conf_paper_df_grouped_year.size().plot.bar(title='number of papers in ai conference per year')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***A3.3***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### We first select the papers published on icml and nips."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 389,
   "metadata": {},
   "outputs": [],
   "source": [
    "mlconf = ['icml', 'nips']\n",
    "mlconf_paper_df = ai_conf_paper_df[ai_conf_paper_df['conference'].isin(mlconf)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 390,
   "metadata": {},
   "outputs": [],
   "source": [
    "mlconf_paper_df_grouped = mlconf_paper_df.groupby('publication year')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### We then plot the number of papers published on icml and nips per year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 391,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7115175d0>"
      ]
     },
     "execution_count": 391,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mlconf_paper_df_grouped.size().plot.bar(title='number of nips, icml papers per year')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"#0000dd\">It is clear that in 2010 and 2011, the number of paper published is significantly lower than usual, which is odd."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 392,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('int16')"
      ]
     },
     "execution_count": 392,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mlconf_paper_df['publication year'].dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 393,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "publication year  conference\n",
       "2010              icml          160\n",
       "2011              icml          154\n",
       "dtype: int64"
      ]
     },
     "execution_count": 393,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Show number of paper each conference in 2010 & 2011\n",
    "mlconf_paper_df[(mlconf_paper_df['publication year'] == 2010)|(mlconf_paper_df['publication year'] == 2011)\n",
    "           ].groupby(['publication year', 'conference']).size()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"#0000dd\">Data of nips in 2010 and 2011 are missed. This is why the number of paper published on 2010 and 2011 is noticeably less than other years."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***A3.4***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### We scrape data from website of nips to fill in the missing data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 395,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set variable type to facilitate comparison later\n",
    "ai_conf_paper_df['publication year'] = ai_conf_paper_df['publication year'].astype('int16')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "url_2010 = 'https://papers.nips.cc/book/advances-in-neural-information-processing-systems-23-2010'\n",
    "url_2011 = 'https://papers.nips.cc/book/advances-in-neural-information-processing-systems-24-2011'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Scrape data from a given url\n",
    "def get_nips_data(url):\n",
    "    publication_year = int(url[-4:])\n",
    "    \n",
    "    r = get(url)\n",
    "    page_body = r.text\n",
    "    soup = BeautifulSoup(page_body, 'html.parser')\n",
    "    row_list = []\n",
    "    for entry in soup.find_all('li')[1:]:\n",
    "        author_list = [content.get_text() for content in entry.find_all('a', class_='author')]\n",
    "        title = entry.find('a').get_text()\n",
    "        if (not title) or (not author_list):\n",
    "            continue\n",
    "        paper_id = 'conf/nips/'+author_list[0].split(' ')[-1]+''.join([name.split(' ')[-1][0] for name in author_list[1:]])+str(publication_year-2000)\n",
    "        conference = 'nips'\n",
    "        row_list.append({'paper id':paper_id, 'author names':author_list, 'publication year':publication_year, \\\n",
    "                            'paper title':title, 'conference':conference})\n",
    "    return pd.DataFrame(row_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "nips_2010_df = get_nips_data(url_2010)\n",
    "nips_2011_df = get_nips_data(url_2011)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(292, 5)\n",
      "(306, 5)\n"
     ]
    }
   ],
   "source": [
    "# print out the number of missing papers\n",
    "print(nips_2010_df.shape)\n",
    "print(nips_2011_df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 400,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Append the scraped data to the dataset\n",
    "ai_conf_paper_df = pd.concat([ai_conf_paper_df, nips_2010_df], ignore_index=True)\n",
    "ai_conf_paper_df = pd.concat([ai_conf_paper_df, nips_2011_df], ignore_index=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Replot A3.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 401,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x71afbd150>"
      ]
     },
     "execution_count": 401,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the number of papers on ai conference per year after the data is completed.\n",
    "ai_conf_paper_df_grouped_year = ai_conf_paper_df.groupby('publication year')\n",
    "ai_conf_paper_df_grouped_year.size().plot.bar(title='number of papers in ai conference per year')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Replot A3.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 402,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x676468150>"
      ]
     },
     "execution_count": 402,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the number of papers on icml and nips per year after the data is completed.\n",
    "mlconf = ['icml', 'nips']\n",
    "mlconf_paper_df = ai_conf_paper_df[ai_conf_paper_df['conference'].astype('str').isin(mlconf)]\n",
    "mlconf_paper_df_grouped = mlconf_paper_df.groupby('publication year')\n",
    "mlconf_paper_df_grouped.size().plot.bar('number of nips, icml papers per year')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 511,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save dataframe\n",
    "author_conf_paper_df.to_pickle('./data/author_conf_paper_df.pkl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 408,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load dataframe\n",
    "ai_conf_paper_df = pd.read_pickle(\"./data/selected_conf_paper_df.pkl\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "0h0Zw8cPTyEp"
   },
   "source": [
    "### A4. Author activity\n",
    "\n",
    "For each author, calculate their normalized paper count, defined as the total number of papers divided by the author’s period of activity. An author’s period of activity is defined as the number of years between the earliest and latest papers of this author. Plot the distribution of the normalized paper count. What is the appropriate scale for the axes? Does the distribution (roughly) follow a particular law, and if yes, which one?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 412,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "dGV5GAndl6LE"
   },
   "outputs": [],
   "source": [
    "s = author_conf_paper_df_grouped.size()\n",
    "new = author_conf_paper_df[['author name','publication year']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 415,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_grouped = new.groupby('author name')\n",
    "min_year_s = new_grouped['publication year'].min()\n",
    "max_year_s = new_grouped['publication year'].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 416,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Compute the period of activity. An extra year is added to the period to avoid nan in the data frame.\n",
    "period_act = max_year_s.astype(\"int16\") - min_year_s.astype(\"int16\") + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 417,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Compute the nomalized paper count of each author\n",
    "normalized_paper_count = s.divide(period_act)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 418,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/miniconda3/envs/ada/lib/python3.7/site-packages/numpy/lib/histograms.py:824: RuntimeWarning: invalid value encountered in greater_equal\n",
      "  keep = (tmp_a >= first_edge)\n",
      "/miniconda3/envs/ada/lib/python3.7/site-packages/numpy/lib/histograms.py:825: RuntimeWarning: invalid value encountered in less_equal\n",
      "  keep &= (tmp_a <= last_edge)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 540x540 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot the distribution of normalized paper count\n",
    "fig, (ax1, ax2) = plt.subplots(2, figsize=(7.5, 7.5))\n",
    "ax1.set_title('Distribution of normalized paper count')\n",
    "ax2.set_title('Distribution of normalized paper count (y in log scale)')\n",
    "ax1.hist(normalized_paper_count, bins = 20)\n",
    "ax2.hist(normalized_paper_count, bins = 20)\n",
    "ax2.plot([10, 0.1], [0.5,10**4], 'g')\n",
    "ax2.set_yscale('log')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"#0000dd\">It can be seen from the plot on top that most of the counts concentrate arount 1, and very few authors have a very large normalized paper count (up to 10.33). This plot has a long tail.\n",
    "\n",
    "<font color=\"#0000dd\">If we plot the paper count by setting the y axis in log scale, we can see that the frequency of paper count approximately decreases linearly as the normalized paper count increases. In conclusion, the frequency decreases exponentially as the normalized paper count increases ($y = exp(-\\alpha x)$)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "ZM7pH8Y_UF3H"
   },
   "source": [
    "## Task B. Ranking authors\n",
    "\n",
    "As you may know, there exist rankings for universities, which represent their relative quality and are used to compare the performance of different universities. In the same vein, there are rankings for conferences and journals, which represent the importance and impact of each conference or journal, and therefore allow for approximate comparisons. In this part, you will rank authors based on different aspects of their research output.\n",
    "\n",
    "### B1. A Naïve Score\n",
    "\n",
    "In the absence of citation counts, it is hard to objectively rank the authors based on the impact of their contributions to the field of AI research. A naïve way would be to rank them based on their number of published papers. Obtain such a ranking and analyze your result. Identify and explain some obvious limitations of this scheme."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 422,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Compute the naive rank by counting the number of papers each author published.\n",
    "naive_rank = author_conf_paper_df.groupby('author name').size().sort_values(ascending=False)\n",
    "naive_rank = pd.DataFrame(naive_rank, columns=['counts']).reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 423,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Change the index to make it start from 1.\n",
    "naive_rank.index = naive_rank.index + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 424,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>author name</th>\n",
       "      <th>counts</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Luc Van Gool</td>\n",
       "      <td>218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Toshio Fukuda</td>\n",
       "      <td>196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Thomas S. Huang</td>\n",
       "      <td>185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Michael I. Jordan</td>\n",
       "      <td>161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Trevor Darrell</td>\n",
       "      <td>155</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         author name  counts\n",
       "1       Luc Van Gool     218\n",
       "2      Toshio Fukuda     196\n",
       "3    Thomas S. Huang     185\n",
       "4  Michael I. Jordan     161\n",
       "5     Trevor Darrell     155"
      ]
     },
     "execution_count": 424,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "naive_rank.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"#0000dd\">A clear drawback of this scheme is that it only considers the number of papers, regardless of their qualities and impacts."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### B2. H5-index\n",
    "\n",
    "Another way to score and rank authors could be based on the quality of the conferences and journals where they publish their papers. For this task, you have to use the H5-index score from AMiner (https://aminer.org/ranks/conf) (another database of scholarly publications), which captures the quality of academic conferences: the higher the H5-index, the better the conference.\n",
    "1. Load the AMiner dataset ( *'aminer_ai.tsv'* available in the folder ``data/``), which contains H5-index values for AI conferences. Load it into a new Pandas dataframe, and join it with the author-centric DBLP dataframe.\n",
    "2. Calculate a *'new'* author ranking (give each author a score, by which the authors are then sorted in order to obtain the ranking), where each author's score is the sum of the H5-indices of all their papers (the H5-index of a paper being the H5-index of the conference it is published in).\n",
    "3. Analyze your new, H5-index-based author ranking and explain how and why your results are different from the previous ranking. Do you see any differences in the top-20 authors based on the H5-index-based ranking and the one produced using publication counts? If yes, list the authors that are ranked in the top 20 based on publication counts but absent in the top 20 based on the H5-index-based ranking. Identify the ranks of these authors in the ranking produced by the H5-index based ranking scheme.\n",
    "4. Now, take the authors in the file `data/list_of_selected_authors.txt`, and compute their rankings using the two (naïve and H5-index-based) ranking schemes. What do you observe? Explain the potential dangers of the naïve, paper-count-based score.\n",
    "5. On the flip side, do you see any potential dangers of using the H5-index-based score?   \n",
    "_Hint: Analyze the conferences in which the top ranked authors publish. Investigate the effect of the conferences in which these authors publish more frequently on the obtained ranking._"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***B2.1***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Load the AMiner dataset and join it with the author-centric DBLP dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 425,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rank</th>\n",
       "      <th>Conference (Full Name)</th>\n",
       "      <th>Short Name</th>\n",
       "      <th>H5-Index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>IEEE Conference on Computer Vision and Pattern...</td>\n",
       "      <td>CVPR</td>\n",
       "      <td>112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>IEEE Transactions on Pattern Analysis and Mach...</td>\n",
       "      <td>TPAMI</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>Expert Systems with Applications</td>\n",
       "      <td>Expert Syst. Appl.</td>\n",
       "      <td>59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>International Journal of Computer Vision</td>\n",
       "      <td>IJCV</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>IEEE International Conference on Robotics and ...</td>\n",
       "      <td>ICRA</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Rank                             Conference (Full Name)  \\\n",
       "0     1  IEEE Conference on Computer Vision and Pattern...   \n",
       "1     2  IEEE Transactions on Pattern Analysis and Mach...   \n",
       "2     3                   Expert Systems with Applications   \n",
       "3     4           International Journal of Computer Vision   \n",
       "4     5  IEEE International Conference on Robotics and ...   \n",
       "\n",
       "           Short Name  H5-Index  \n",
       "0                CVPR       112  \n",
       "1               TPAMI       101  \n",
       "2  Expert Syst. Appl.        59  \n",
       "3                IJCV        58  \n",
       "4                ICRA        58  "
      ]
     },
     "execution_count": 425,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load the AMiner dataset.\n",
    "aminer_df = pd.read_csv('data/aminer_ai.csv',delimiter=';')\n",
    "aminer_df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 426,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Modify aminer dataframe to conform to ai conference dataset\n",
    "aminer_df = aminer_df.drop('Conference (Full Name)', axis = 1)\n",
    "aminer_df.rename(columns={'Short Name':'conference'},inplace=True)\n",
    "aminer_df['conference'] = aminer_df['conference'].str.lower()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 427,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Merge two dataframes\n",
    "author_conf_paper_H5_df = pd.merge(author_conf_paper_df, aminer_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 428,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>paper id</th>\n",
       "      <th>author name</th>\n",
       "      <th>publication year</th>\n",
       "      <th>paper title</th>\n",
       "      <th>conference</th>\n",
       "      <th>Rank</th>\n",
       "      <th>H5-Index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>conf/iccv/KunoOO90</td>\n",
       "      <td>Yoshinori Kuno</td>\n",
       "      <td>1990</td>\n",
       "      <td>Object recognition using a feature search stra...</td>\n",
       "      <td>iccv</td>\n",
       "      <td>6</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>conf/iccv/KunoOO90</td>\n",
       "      <td>Yasukazu Okamoto</td>\n",
       "      <td>1990</td>\n",
       "      <td>Object recognition using a feature search stra...</td>\n",
       "      <td>iccv</td>\n",
       "      <td>6</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>conf/iccv/KunoOO90</td>\n",
       "      <td>Satoshi Okada</td>\n",
       "      <td>1990</td>\n",
       "      <td>Object recognition using a feature search stra...</td>\n",
       "      <td>iccv</td>\n",
       "      <td>6</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>conf/iccv/VedulaBRCK99</td>\n",
       "      <td>Sundar Vedula</td>\n",
       "      <td>1999</td>\n",
       "      <td>Three-Dimensional Scene Flow.</td>\n",
       "      <td>iccv</td>\n",
       "      <td>6</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>conf/iccv/VedulaBRCK99</td>\n",
       "      <td>Simon Baker</td>\n",
       "      <td>1999</td>\n",
       "      <td>Three-Dimensional Scene Flow.</td>\n",
       "      <td>iccv</td>\n",
       "      <td>6</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 paper id       author name  publication year  \\\n",
       "0      conf/iccv/KunoOO90    Yoshinori Kuno              1990   \n",
       "1      conf/iccv/KunoOO90  Yasukazu Okamoto              1990   \n",
       "2      conf/iccv/KunoOO90     Satoshi Okada              1990   \n",
       "3  conf/iccv/VedulaBRCK99     Sundar Vedula              1999   \n",
       "4  conf/iccv/VedulaBRCK99       Simon Baker              1999   \n",
       "\n",
       "                                         paper title conference  Rank  \\\n",
       "0  Object recognition using a feature search stra...       iccv     6   \n",
       "1  Object recognition using a feature search stra...       iccv     6   \n",
       "2  Object recognition using a feature search stra...       iccv     6   \n",
       "3                      Three-Dimensional Scene Flow.       iccv     6   \n",
       "4                      Three-Dimensional Scene Flow.       iccv     6   \n",
       "\n",
       "   H5-Index  \n",
       "0        58  \n",
       "1        58  \n",
       "2        58  \n",
       "3        58  \n",
       "4        58  "
      ]
     },
     "execution_count": 428,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "author_conf_paper_H5_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***B2.2***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Order the author according to the sum of the H5-indices of all their papers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 429,
   "metadata": {},
   "outputs": [],
   "source": [
    "author_conf_paper_H5_df_grouped = author_conf_paper_H5_df.groupby('author name')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 434,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Compute the h5 rank by summng up the h5 index of the conference on which the paper is published\n",
    "h5_rank = author_conf_paper_H5_df_grouped.sum().drop(['Rank', 'publication year'], axis=1).sort_values(by='H5-Index', ascending=False)\n",
    "h5_rank = h5_rank.reset_index()\n",
    "h5_rank.index = h5_rank.index + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 435,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>author name</th>\n",
       "      <th>H5-Index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Luc Van Gool</td>\n",
       "      <td>18600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Thomas S. Huang</td>\n",
       "      <td>14001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Xiaoou Tang</td>\n",
       "      <td>13146</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Trevor Darrell</td>\n",
       "      <td>12610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Shuicheng Yan</td>\n",
       "      <td>12353</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       author name  H5-Index\n",
       "1     Luc Van Gool     18600\n",
       "2  Thomas S. Huang     14001\n",
       "3      Xiaoou Tang     13146\n",
       "4   Trevor Darrell     12610\n",
       "5    Shuicheng Yan     12353"
      ]
     },
     "execution_count": 435,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "h5_rank.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***B2.3***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Compare the top 20 authors in both rankings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 436,
   "metadata": {},
   "outputs": [],
   "source": [
    "naive_top20 = naive_rank.iloc[:20, 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 437,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1               Luc Van Gool\n",
       "2              Toshio Fukuda\n",
       "3            Thomas S. Huang\n",
       "4          Michael I. Jordan\n",
       "5             Trevor Darrell\n",
       "6              Shuicheng Yan\n",
       "7               Takeo Kanade\n",
       "8                Xiaoou Tang\n",
       "9           Vijay Kumar 0001\n",
       "10            Larry S. Davis\n",
       "11                  Dan Roth\n",
       "12           Wolfram Burgard\n",
       "13           Roland Siegwart\n",
       "14            Marc Pollefeys\n",
       "15    Christopher D. Manning\n",
       "16            Martial Hebert\n",
       "17                 Dan Klein\n",
       "18          Andrew Zisserman\n",
       "19              Eric P. Xing\n",
       "20        Bernhard Schölkopf\n",
       "Name: author name, dtype: object"
      ]
     },
     "execution_count": 437,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Top 20 on naive rank\n",
    "naive_top20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 438,
   "metadata": {},
   "outputs": [],
   "source": [
    "h5_top20 = h5_rank.iloc[:20, 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 439,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1             Luc Van Gool\n",
       "2          Thomas S. Huang\n",
       "3              Xiaoou Tang\n",
       "4           Trevor Darrell\n",
       "5            Shuicheng Yan\n",
       "6            Toshio Fukuda\n",
       "7           Marc Pollefeys\n",
       "8           Larry S. Davis\n",
       "9           Martial Hebert\n",
       "10            Takeo Kanade\n",
       "11              Pascal Fua\n",
       "12    Ming-Hsuan Yang 0001\n",
       "13            Mubarak Shah\n",
       "14          Jitendra Malik\n",
       "15           Xiaogang Wang\n",
       "16        Andrew Zisserman\n",
       "17          Alan L. Yuille\n",
       "18           Bernt Schiele\n",
       "19          Rama Chellappa\n",
       "20       Michael I. Jordan\n",
       "Name: author name, dtype: object"
      ]
     },
     "execution_count": 439,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Top 20 on h5 rank\n",
    "h5_top20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 440,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Vijay Kumar 0001',\n",
       " 'Dan Roth',\n",
       " 'Wolfram Burgard',\n",
       " 'Roland Siegwart',\n",
       " 'Christopher D. Manning',\n",
       " 'Dan Klein',\n",
       " 'Eric P. Xing',\n",
       " 'Bernhard Schölkopf']"
      ]
     },
     "execution_count": 440,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Authors that are top 20 on naive rank but absent from top 20 on h5 rank\n",
    "naive_rank_list = naive_rank.head(20)['author name'].tolist()\n",
    "h5_rank_list = h5_rank.head(20)['author name'].tolist()\n",
    "naive_author_list = [author for author in naive_rank_list if author not in h5_rank_list]\n",
    "naive_author_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 442,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>author name</th>\n",
       "      <th>H5-Index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>23</td>\n",
       "      <td>Vijay Kumar 0001</td>\n",
       "      <td>8334</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>27</td>\n",
       "      <td>Roland Siegwart</td>\n",
       "      <td>8111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>31</td>\n",
       "      <td>Wolfram Burgard</td>\n",
       "      <td>7879</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>35</td>\n",
       "      <td>Eric P. Xing</td>\n",
       "      <td>7455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>39</td>\n",
       "      <td>Bernhard Schölkopf</td>\n",
       "      <td>6912</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>61</td>\n",
       "      <td>Dan Roth</td>\n",
       "      <td>5845</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>68</td>\n",
       "      <td>Christopher D. Manning</td>\n",
       "      <td>5606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>83</td>\n",
       "      <td>Dan Klein</td>\n",
       "      <td>5314</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               author name  H5-Index\n",
       "23        Vijay Kumar 0001      8334\n",
       "27         Roland Siegwart      8111\n",
       "31         Wolfram Burgard      7879\n",
       "35            Eric P. Xing      7455\n",
       "39      Bernhard Schölkopf      6912\n",
       "61                Dan Roth      5845\n",
       "68  Christopher D. Manning      5606\n",
       "83               Dan Klein      5314"
      ]
     },
     "execution_count": 442,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Abscent authors' rank on h5 rank\n",
    "h5_rank[h5_rank['author name'].isin(naive_author_list)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<font color=\"#0000dd\">As one shall see, some top 20 authors in naive rankings have lower rank in h5-index ranking but they are still in top 83."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***B2.4***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Investigate rank of selected authors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 443,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the names of authors\n",
    "selected_author_df = pd.read_csv('data/list_of_selected_authors.txt', header=None, names=['author name'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 444,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>author name</th>\n",
       "      <th>counts</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2284</td>\n",
       "      <td>Hy Murveit</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3451</td>\n",
       "      <td>Mengjie Zhang</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4588</td>\n",
       "      <td>Naokazu Yokoya</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4884</td>\n",
       "      <td>Jianwu Dang</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5064</td>\n",
       "      <td>Sebastian Otte</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>26817</td>\n",
       "      <td>Parag Havaldar</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>31685</td>\n",
       "      <td>Charles Freundlich</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>32396</td>\n",
       "      <td>Iljung S. Kwak</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>36720</td>\n",
       "      <td>Yukihiro Nakamura</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>37188</td>\n",
       "      <td>Steffen Abraham</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              author name  counts\n",
       "2284           Hy Murveit      17\n",
       "3451        Mengjie Zhang      13\n",
       "4588       Naokazu Yokoya      11\n",
       "4884          Jianwu Dang      10\n",
       "5064       Sebastian Otte      10\n",
       "26817      Parag Havaldar       2\n",
       "31685  Charles Freundlich       2\n",
       "32396      Iljung S. Kwak       2\n",
       "36720   Yukihiro Nakamura       2\n",
       "37188     Steffen Abraham       2"
      ]
     },
     "execution_count": 444,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Compute these authors' rank on naive rank\n",
    "naive_rank[naive_rank['author name'].isin(selected_author_df.values.flatten())]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 445,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>author name</th>\n",
       "      <th>H5-Index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>19177</td>\n",
       "      <td>Hy Murveit</td>\n",
       "      <td>170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19233</td>\n",
       "      <td>Steffen Abraham</td>\n",
       "      <td>170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19719</td>\n",
       "      <td>Iljung S. Kwak</td>\n",
       "      <td>170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19720</td>\n",
       "      <td>Parag Havaldar</td>\n",
       "      <td>170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19762</td>\n",
       "      <td>Charles Freundlich</td>\n",
       "      <td>170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19855</td>\n",
       "      <td>Yukihiro Nakamura</td>\n",
       "      <td>170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20882</td>\n",
       "      <td>Naokazu Yokoya</td>\n",
       "      <td>158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21907</td>\n",
       "      <td>Sebastian Otte</td>\n",
       "      <td>148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22509</td>\n",
       "      <td>Mengjie Zhang</td>\n",
       "      <td>140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>23972</td>\n",
       "      <td>Jianwu Dang</td>\n",
       "      <td>122</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              author name  H5-Index\n",
       "19177          Hy Murveit       170\n",
       "19233     Steffen Abraham       170\n",
       "19719      Iljung S. Kwak       170\n",
       "19720      Parag Havaldar       170\n",
       "19762  Charles Freundlich       170\n",
       "19855   Yukihiro Nakamura       170\n",
       "20882      Naokazu Yokoya       158\n",
       "21907      Sebastian Otte       148\n",
       "22509       Mengjie Zhang       140\n",
       "23972         Jianwu Dang       122"
      ]
     },
     "execution_count": 445,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Compute these authors' rank on h5 rank\n",
    "h5_rank[h5_rank['author name'].isin(selected_author_df.values.flatten())]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"#0000dd\">For these selected authors, their ranking based on h5-index is very different from that based on number of papers. Authors like Hy Murvei, Mengjie Zhang and Naokazu Yokoya rank arount 3000 on naive rank are behind 19000 on h5 rank. \n",
    "\n",
    "<font color=\"#0000dd\">The naive rank has a potential danger that some authors that publish lots of paper on non-influential conferences may rank high. Their work and influence are largely over-estimated. On the contrary, some authors that published fewer papers on very influenctial conferences rank low, making their work underestimated."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***B2.5***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Discuss possible limitations of h5-index ranking"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 446,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "conference\n",
       "aaai       61\n",
       "accv       82\n",
       "acl         2\n",
       "cvpr     1338\n",
       "emnlp       5\n",
       "fgr        96\n",
       "icann       1\n",
       "iccv      536\n",
       "icml       81\n",
       "icra      323\n",
       "ijcai      45\n",
       "naacl       6\n",
       "nips      244\n",
       "dtype: int64"
      ]
     },
     "execution_count": 446,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Show the conferences on which top 20 on h5 rank publish their paper. \n",
    "h5_top20_df = author_conf_paper_df[author_conf_paper_df['author name'].isin(h5_top20)]\n",
    "h5_top20_df.groupby(['conference']).size()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 447,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2820, 5)"
      ]
     },
     "execution_count": 447,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Number of papers published by top 20 in total\n",
    "h5_top20_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 449,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rank</th>\n",
       "      <th>conference</th>\n",
       "      <th>H5-Index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>cvpr</td>\n",
       "      <td>112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>icra</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>iccv</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>icml</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>8</td>\n",
       "      <td>nips</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>10</td>\n",
       "      <td>acl</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>13</td>\n",
       "      <td>emnlp</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>14</td>\n",
       "      <td>aaai</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20</td>\n",
       "      <td>21</td>\n",
       "      <td>ijcai</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>70</td>\n",
       "      <td>71</td>\n",
       "      <td>naacl</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>72</td>\n",
       "      <td>73</td>\n",
       "      <td>accv</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>89</td>\n",
       "      <td>90</td>\n",
       "      <td>icann</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>94</td>\n",
       "      <td>95</td>\n",
       "      <td>fgr</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Rank conference  H5-Index\n",
       "0      1       cvpr       112\n",
       "4      5       icra        58\n",
       "5      6       iccv        58\n",
       "6      7       icml        56\n",
       "7      8       nips        51\n",
       "9     10        acl        48\n",
       "12    13      emnlp        45\n",
       "13    14       aaai        44\n",
       "20    21      ijcai        35\n",
       "70    71      naacl        10\n",
       "72    73       accv        10\n",
       "89    90      icann         4\n",
       "94    95        fgr         1"
      ]
     },
     "execution_count": 449,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Show the h5 index of these conferences\n",
    "conf = h5_top20_df['conference'].astype('category').cat.categories\n",
    "aminer_df[aminer_df['conference'].isin(list(conf))]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"#0000dd\">It can be seen that half of the top 20 authors' paper are published on cvpr, which has a h5-index of 112. H5-index gained by publishing one paper on cvpr equals to publishing 112 papers on fgr, 2 papers on icra. \n",
    "\n",
    "<font color=\"#0000dd\">The efforts spent on publishing a paper or the quality of a paper may be similar, however conferences' diverging h5-index makes the influence totally different. So this h5-index rank may exaggerate the influence of conference."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### B3. And Justice For All\n",
    "\n",
    "An ideal ranking scheme should not give undue advantage to authors who have been conducting research for a longer period of time and therefore have naturally published more papers when compared to a junior researcher. Does the ranking scheme designed by you in ``Step 2`` take this factor into account? If not, introduce variations in your ranking scheme to mitigate this effect. Do you observe anything odd with this new ranking? Clearly explain your observations.\n",
    "\n",
    "_Hint: What you did in part A4 may be useful here._"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Like in A4, we divide the sum of H5 index by the period of activity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 450,
   "metadata": {},
   "outputs": [],
   "source": [
    "period_act_df = pd.DataFrame(period_act).reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 451,
   "metadata": {},
   "outputs": [],
   "source": [
    "period_act_df.rename(columns={'publication year':'period of activity'},inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 452,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate h5-index/period of activity and append it to the  \n",
    "author_conf_paper_H5_avg_df = author_conf_paper_H5_df\n",
    "author_conf_paper_H5_avg_df = pd.merge(author_conf_paper_H5_avg_df, period_act_df, \\\n",
    "                                       right_on='author name', left_on='author name')\n",
    "author_conf_paper_H5_avg_df['H5-Index'] \\\n",
    "        = author_conf_paper_H5_avg_df['H5-Index'] / author_conf_paper_H5_avg_df['period of activity']\n",
    "author_conf_paper_H5_avg_df.rename(columns={'H5-Index':'normalized H5-Index score'}, inplace=True)\n",
    "author_conf_paper_H5_avg_df = author_conf_paper_H5_avg_df.groupby('author name').sum()\\\n",
    "                              .drop(['period of activity', 'Rank'], axis=1).reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 453,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "author_conf_paper_H5_avg_df.insert(2, 'period of activity', period_act.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 454,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Sort the authors using the new index\n",
    "author_conf_paper_H5_avg_df = author_conf_paper_H5_avg_df.sort_values(by=['normalized H5-Index score'], ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 455,
   "metadata": {},
   "outputs": [],
   "source": [
    "author_conf_paper_H5_avg_df.drop(columns='publication year', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 456,
   "metadata": {},
   "outputs": [],
   "source": [
    "author_conf_paper_H5_avg_df.reset_index(drop = True, inplace = True)\n",
    "author_conf_paper_H5_avg_df.index += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 457,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>author name</th>\n",
       "      <th>period of activity</th>\n",
       "      <th>normalized H5-Index score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Li Fei-Fei 0001</td>\n",
       "      <td>3</td>\n",
       "      <td>953.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Xiaoou Tang</td>\n",
       "      <td>16</td>\n",
       "      <td>821.625000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Shuicheng Yan</td>\n",
       "      <td>17</td>\n",
       "      <td>726.647059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Jiashi Feng</td>\n",
       "      <td>8</td>\n",
       "      <td>700.875000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Luc Van Gool</td>\n",
       "      <td>29</td>\n",
       "      <td>641.379310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Xiaogang Wang</td>\n",
       "      <td>16</td>\n",
       "      <td>619.562500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>Xiaodan Liang</td>\n",
       "      <td>4</td>\n",
       "      <td>591.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>Sergey Levine</td>\n",
       "      <td>7</td>\n",
       "      <td>547.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>Stefanos Zafeiriou</td>\n",
       "      <td>10</td>\n",
       "      <td>513.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>Raquel Urtasun</td>\n",
       "      <td>17</td>\n",
       "      <td>490.823529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>Ming-Hsuan Yang 0001</td>\n",
       "      <td>21</td>\n",
       "      <td>487.142857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>Chunhua Shen</td>\n",
       "      <td>14</td>\n",
       "      <td>482.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>Jinshan Pan</td>\n",
       "      <td>2</td>\n",
       "      <td>477.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>Wanli Ouyang</td>\n",
       "      <td>9</td>\n",
       "      <td>477.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>Heng Huang</td>\n",
       "      <td>11</td>\n",
       "      <td>467.363636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>16</td>\n",
       "      <td>Marc Pollefeys</td>\n",
       "      <td>24</td>\n",
       "      <td>467.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17</td>\n",
       "      <td>Kristen Grauman</td>\n",
       "      <td>18</td>\n",
       "      <td>448.611111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>18</td>\n",
       "      <td>Liang Lin</td>\n",
       "      <td>12</td>\n",
       "      <td>447.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19</td>\n",
       "      <td>Lin Ma 0002</td>\n",
       "      <td>2</td>\n",
       "      <td>446.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20</td>\n",
       "      <td>Devi Parikh</td>\n",
       "      <td>12</td>\n",
       "      <td>444.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             author name  period of activity  normalized H5-Index score\n",
       "1        Li Fei-Fei 0001                   3                 953.333333\n",
       "2            Xiaoou Tang                  16                 821.625000\n",
       "3          Shuicheng Yan                  17                 726.647059\n",
       "4            Jiashi Feng                   8                 700.875000\n",
       "5           Luc Van Gool                  29                 641.379310\n",
       "6          Xiaogang Wang                  16                 619.562500\n",
       "7          Xiaodan Liang                   4                 591.000000\n",
       "8          Sergey Levine                   7                 547.000000\n",
       "9     Stefanos Zafeiriou                  10                 513.900000\n",
       "10        Raquel Urtasun                  17                 490.823529\n",
       "11  Ming-Hsuan Yang 0001                  21                 487.142857\n",
       "12          Chunhua Shen                  14                 482.500000\n",
       "13           Jinshan Pan                   2                 477.500000\n",
       "14          Wanli Ouyang                   9                 477.333333\n",
       "15            Heng Huang                  11                 467.363636\n",
       "16        Marc Pollefeys                  24                 467.250000\n",
       "17       Kristen Grauman                  18                 448.611111\n",
       "18             Liang Lin                  12                 447.250000\n",
       "19           Lin Ma 0002                   2                 446.500000\n",
       "20           Devi Parikh                  12                 444.000000"
      ]
     },
     "execution_count": 457,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "author_conf_paper_H5_avg_df.head(20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"#0000dd\">It is surprising that the author that ranks 1st's period of activity is just 3 years. Almost half of the top 20 have a period of activity lower than 10. Young researchers are kind of leading in this AI field. Perhaps it is because AI develops really fast in recent years and young researchers could better catch up with the trend. \n",
    "    \n",
    "<font color=\"#0000dd\">By using the normailized H5-index score to compare authors, the result is very sensitive to the errors in period of activity. We discovered authors such as Li FeiFei and JinShan Pan actually have more than 15 and 4 years of activation. This data inconsistence introduces 5 and 2 times of error in normalized ranking results.\n",
    "    \n",
    "<font color=\"#0000dd\">It is also noticeable that the gap of normalized h5 score among the top 10 authors (about 463) is larger than that among authors ranking from 11 to 20 (44). It is harder to narrow down the gap between extremely excellent researchers. This may indicate that most people are just ordinary, yet very few are genius. And the difference can be huge."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task C. Trending topics\n",
    "\n",
    "Historically, the field of AI has witnessed research in two broad flavors: “symbolic” (logic, planning, control, etc.) vs. “connectionist” (neural networks, deep learning, Bayesian methods, etc.). Let’s see if we can see how the popularity of these two approaches to AI is reflected in the DBLP data.\n",
    "\n",
    "To this end, construct two dataframes: ``symbolic`` and ``connectionist``. ``symbolic`` is your paper-centric dataframe from part A1 filtered down to those papers whose titles contain at least one of the following words (not differentiating between upper and lower case letters): “logic”, “planning”, “control”; ``connectionist`` is a dataframe constructed in a similar manner, but with the words “deep”, “learning”, “feature”, “bayesian”. Plot the number of papers per year for ``symbolic`` and ``connectionist`` separately (i.e., 2 plots).\n",
    "1. Describe the trends you observe. Based on these plots alone, what might one conclude about the popularity of the two approaches to AI?\n",
    "2. Moving beyond these plots, what do you, as a careful data scientist, conclude about the popularity of symbolic vs. connectionist AI? Corroborate your reasoning with further plots.\n",
    "\n",
    "_Note: You could use the text handling utilities below to clean the text in the paper titles._"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Text handling utilities\n",
    "from string import punctuation\n",
    "stopwords_list = open('data/stopwords.txt', 'r').readlines()\n",
    "stopwords_list = [x.strip() for x in stopwords_list]\n",
    "def stopword_remover(text):\n",
    "    text_list = text.split()\n",
    "    text_list = [x for x in text_list if x not in stopwords_list]\n",
    "    return ' '.join(text_list)\n",
    "def lowercase_all(text):\n",
    "    return text.lower()\n",
    "def remove_punct(text):\n",
    "    return ''.join([ch for ch in text if ch not in punctuation])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>paper id</th>\n",
       "      <th>author names</th>\n",
       "      <th>publication year</th>\n",
       "      <th>paper title</th>\n",
       "      <th>conference</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>conf/iccv/KunoOO90</td>\n",
       "      <td>[Yoshinori Kuno, Yasukazu Okamoto, Satoshi Okada]</td>\n",
       "      <td>1990</td>\n",
       "      <td>object recognition using feature search strate...</td>\n",
       "      <td>iccv</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>conf/iccv/VedulaBRCK99</td>\n",
       "      <td>[Sundar Vedula, Simon Baker, Peter Rander, Rob...</td>\n",
       "      <td>1999</td>\n",
       "      <td>threedimensional scene flow</td>\n",
       "      <td>iccv</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>conf/iccv/MeminP99</td>\n",
       "      <td>[Étienne Mémin, Patrick Pérez]</td>\n",
       "      <td>1999</td>\n",
       "      <td>fluid motion recovery coupling dense parametri...</td>\n",
       "      <td>iccv</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>conf/iccv/DickinsonPR90</td>\n",
       "      <td>[Sven J. Dickinson, Alex Pentland, Azriel Rose...</td>\n",
       "      <td>1990</td>\n",
       "      <td>qualitative 3d shape reconstruction using dist...</td>\n",
       "      <td>iccv</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>conf/iccv/SinghYL17</td>\n",
       "      <td>[Avi Singh, Larry Yang, Sergey Levine]</td>\n",
       "      <td>2017</td>\n",
       "      <td>gplac generalizing visionbased robotic skills ...</td>\n",
       "      <td>iccv</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  paper id                                       author names  \\\n",
       "0       conf/iccv/KunoOO90  [Yoshinori Kuno, Yasukazu Okamoto, Satoshi Okada]   \n",
       "1   conf/iccv/VedulaBRCK99  [Sundar Vedula, Simon Baker, Peter Rander, Rob...   \n",
       "2       conf/iccv/MeminP99                     [Étienne Mémin, Patrick Pérez]   \n",
       "3  conf/iccv/DickinsonPR90  [Sven J. Dickinson, Alex Pentland, Azriel Rose...   \n",
       "4      conf/iccv/SinghYL17             [Avi Singh, Larry Yang, Sergey Levine]   \n",
       "\n",
       "  publication year                                        paper title  \\\n",
       "0             1990  object recognition using feature search strate...   \n",
       "1             1999                        threedimensional scene flow   \n",
       "2             1999  fluid motion recovery coupling dense parametri...   \n",
       "3             1990  qualitative 3d shape reconstruction using dist...   \n",
       "4             2017  gplac generalizing visionbased robotic skills ...   \n",
       "\n",
       "  conference  \n",
       "0       iccv  \n",
       "1       iccv  \n",
       "2       iccv  \n",
       "3       iccv  \n",
       "4       iccv  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# clean the title \n",
    "conf_paper_df = pd.read_pickle('./data/A1complete.pkl')\n",
    "conf_paper_df['paper title'] = conf_paper_df['paper title'].apply(remove_punct).apply(stopword_remover).apply(lowercase_all)\n",
    "conf_paper_df = conf_paper_df[conf_paper_df['publication year'] != 'unknown']\n",
    "conf_paper_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9884\n",
      "16759\n"
     ]
    }
   ],
   "source": [
    "# filter the data with symbolic paper\n",
    "words_symbolic = ['logic', 'planning', 'control']\n",
    "symbolic = conf_paper_df[conf_paper_df['paper title'].str.contains('|'.join(words_symbolic))]\n",
    "print(len(symbolic.index))\n",
    "# filter the data with connectionist paper\n",
    "words_connectionist = ['deep', 'learning', 'feature', 'bayesian']\n",
    "connectionist = conf_paper_df[conf_paper_df['paper title'].str.contains('|'.join(words_connectionist))]\n",
    "print(len(connectionist.index))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the number of symbolic paper per year\n",
    "ax = symbolic.groupby('publication year')['paper id'].count().plot(label = 'symbolic',  kind = 'bar', figsize = (15,5))\n",
    "ax.set_title('Trend of symbolic paper count', fontsize = 15)\n",
    "ax.set_ylabel('number of papes', fontsize = 14)\n",
    "ax.set_xlabel('year', fontsize = 14)\n",
    "plt.legend(fontsize=13)\n",
    "ax.grid(True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the number of connectionist paper per year\n",
    "ax = connectionist.groupby('publication year')['paper id'].count().plot(label = 'connectionist',  kind = 'bar', figsize = (15,5))\n",
    "ax.set_ylabel('number of papes', fontsize = 14)\n",
    "ax.set_xlabel('year', fontsize = 14)\n",
    "plt.legend(fontsize=13)\n",
    "ax.set_title('Trend of connectionist paper count', fontsize = 15)\n",
    "ax.grid(True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'nubmer difference of connectionist minus symbolic paper ')"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# print the quantity difference between symbolic and connectionist per year\n",
    "ax = connectionist.groupby('publication year')['paper id'].count(). \\\n",
    "subtract(symbolic.groupby('publication year')['paper id'].count()).  \\\n",
    "plot(label = 'connectionist', figsize = (15,5))\n",
    "ax.plot([1968, 0], [2018, 0], 'g')\n",
    "ax.grid(True)\n",
    "ax.set_ylabel('number of papers', fontsize = 14)\n",
    "ax.set_xlabel('year', fontsize = 14)\n",
    "ax.set_title('number difference of connectionist minus symbolic paper ', fontsize=15)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<font color=\"#0000dd\">Overall, there is a gradual increase in both symbolic and connectionist papers but connectionist type becomes much more popular than symbolic nowadays. Before 1983, only a few of papers concerning machine learning were published. \n",
    "    \n",
    "<font color=\"#0000dd\">But later the figure for symbolic grows linealy while that for connectionist grows exponentially and exceeds symbolics in the year of 2003. The difference in paper numbers is continuing to enlarge beewteen those two flavors.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "author_conf_paper_df = pd.read_pickle('./data/author_conf_paper_df.pkl')\n",
    "author_conf_paper_df['paper title'] = author_conf_paper_df['paper title'].apply(remove_punct).apply(stopword_remover).apply(lowercase_all)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x12dd5bc10>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "leftIndex = author_conf_paper_df['paper title'].str.contains('|'.join(words_symbolic)) \n",
    "ax = author_conf_paper_df[leftIndex].groupby('publication year').apply(lambda table: table.drop_duplicates(['author name'])['paper id']\n",
    "                                            .count()).plot(label = 'symbolic',  kind = 'bar', figsize = (15,5))\n",
    "\n",
    "ax.set_title('Trend of symbolic author count', fontsize = 15)\n",
    "ax.set_ylabel('number of unique authors', fontsize = 14)\n",
    "ax.set_xlabel('year', fontsize = 14)\n",
    "ax.grid(True)\n",
    "plt.legend(fontsize=13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "leftIndex = author_conf_paper_df['paper title'].str.contains('|'.join(words_connectionist)) \n",
    "ax = author_conf_paper_df[leftIndex].groupby('publication year').apply(lambda table: table.drop_duplicates(['author name'])['paper id']\n",
    "                                            .count()).plot(log =True, label = 'connectionist',  kind = 'bar', figsize = (15,5))\n",
    "\n",
    "ax.set_title('Trend of connectionist author count', fontsize = 15)\n",
    "ax.set_ylabel('number of unique authors', fontsize = 14)\n",
    "ax.set_xlabel('year', fontsize = 14)\n",
    "plt.legend(fontsize=13)\n",
    "ax.grid(True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<font color=\"#0000dd\">The trend of number of paticipated authors is almost the same as the total number of papers but with higher number. This is because one paper is published by numerous authors. \n",
    "\n",
    "<font color=\"#0000dd\">The number of unique authors reflects similar trends as number of papers in those two flavors. When plotting the increase pattern of connectionist author counts, we observe a rapid growth of author numbers close to exponentially increasing.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "Homework 1.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
